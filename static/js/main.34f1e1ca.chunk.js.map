{"version":3,"sources":["App.js","serviceWorker.js","cerebral-app/index.js","index.js"],"names":["connect","color","state","_templateObject","center","_templateObject2","boundary","_templateObject3","mapClicked","sequences","_templateObject4","loadBoundary","_templateObject5","props","console","log","md5","JSON","stringify","react_default","a","createElement","className","onClick","Map","style","height","zoom","TileLayer","url","subdomains","GeoJSON","key","data","Boolean","window","location","hostname","match","CerebralApp","type","features","properties","geometry","coordinates","sequence","_ref","store","get","cerebral_app_templateObject","set","cerebral_app_templateObject2","cerebral_app_templateObject3","_ref2","axios","headers","Authorization","then","resp","cerebral_app_templateObject4","geojson","devtools","DevTools","host","reconnect","ReactDOM","render","_cerebral_react","app","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6qBAYA,IAEeA,oBAAQ,CACrBC,MAAOC,gBAAFC,KACLC,OAAQF,gBAAFG,KACNC,SAAUJ,gBAAFK,KAERC,WAAYC,oBAAFC,KACVC,aAAcF,oBAAFG,MAEX,SAAaC,GAEd,OADFC,QAAQC,IAAI,2BAA4BC,IAAIC,KAAKC,UAAUL,EAAMP,YAE7Da,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,kBAAMV,EAAMF,iBAA7B,iBACAQ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,MAAO,CAACC,OAAQ,SAAUtB,OAAQS,EAAMT,OAAQuB,KAf9C,IAgBLR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACEC,IAAI,sDACJC,WAAY,CAAC,MAAM,MAAM,MAAM,SAEjCX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,IAAKhB,IAAIC,KAAKC,UAAUL,EAAMP,WAAY2B,KAAMpB,EAAMP,SAAUL,MAAOY,EAAMZ,MAAOsB,QAAS,kBAAMV,EAAML,oBCpBtG0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mYCbSC,wBAAY,CACzBrC,MAAO,CACLD,MAAO,QACPG,OAAQ,CAAE,IAAK,IACfE,SAAU,CACRkC,KAAQ,oBACRC,SAAY,CACV,CACED,KAAQ,UACRE,WAAc,GACdC,SAAY,CACVH,KAAQ,aACRI,YAAe,CACb,EACG,WACD,mBAEF,EACG,WACD,mBAEF,EACG,cACD,oBAEF,EACG,aACD,mBAEF,EACG,YACD,kBAEF,EACG,aACD,mBAEF,EACG,cACD,mBAEF,EACG,aACD,mBAEF,EACG,aACD,mBAEF,EACG,cACD,mBAEF,EACG,YACD,sBAKR,CACEJ,KAAQ,UACRE,WAAc,GACdC,SAAY,CACVH,KAAQ,UACRI,YAAe,CACb,CACE,EACG,cACD,oBAEF,EACG,kBACD,mBAEF,EACG,aACD,kBAEF,EACG,cACD,mBAEF,EACG,aACD,mBAEF,EACG,UACD,mBAEF,EACG,aACD,mBAEF,EACG,cACD,2BAShBnC,UAAW,CACTD,WAAYqC,mBAAS,aAAc,CACjC,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAF,MAAwC,SAAtBC,EAAlBF,EAAQE,KAAc9C,gBAAA+C,MAA2BF,EAAMG,IAAIhD,gBAAViD,KAAwB,SAAWJ,EAAMG,IAAIhD,gBAAVkD,KAAwB,UAE9GzC,aAAckC,mBAAS,eAAgB,CACrC,SAAAQ,GAAA,IAAEN,EAAFM,EAAEN,MAAF,OAAaO,IAAMN,IAAI,8FAA+F,CACpHO,QAAS,CAAEC,cAAe,gBACzBC,KAAK,SAAAC,GACNX,EAAMG,IAAIhD,gBAAVyD,KAA2BD,EAAKzB,KAAK3B,SAASsD,gBAInD,CACDC,SAAUC,YAAS,CACjBC,KAAM,iBACNC,WAAW,MCpHfC,IAASC,OACP/C,EAAAC,EAAAC,cAAC8C,EAAA,UAAD,CAAWC,IAAK7B,GACdpB,EAAAC,EAAAC,cAACgD,EAAD,OAEFC,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.34f1e1ca.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport md5 from 'md5';\nimport { state,sequences } from 'cerebral';\nimport { connect } from '@cerebral/react';\n\n// Need to include the leaflet CSS file\nimport 'leaflet/dist/leaflet.css';\n\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\n\nconst zoom = 13;\n\nexport default connect({\n  color: state`color`,\n  center: state`center`,\n  boundary: state`boundary`,\n\n  mapClicked: sequences`mapClicked`,\n  loadBoundary: sequences`loadBoundary`,\n\n}, function App(props) {\nconsole.log('redrawing!!! boundary = ', md5(JSON.stringify(props.boundary)));\n  return (\n    <div className=\"App\">\n      <button onClick={() => props.loadBoundary()}>Load Boundary</button>\n      <Map style={{height: \"100vh\"}} center={props.center} zoom={zoom}>\n        <TileLayer\n          url='http://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}'\n          subdomains={['mt0','mt1','mt2','mt3']}\n        />\n        <GeoJSON key={md5(JSON.stringify(props.boundary))} data={props.boundary} color={props.color} onClick={() => props.mapClicked() }/>\n      </Map>\n\n    </div>\n  );\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import CerebralApp from 'cerebral';\nimport DevTools from 'cerebral/devtools';\nimport { state, sequence } from 'cerebral';\nimport axios from 'axios';\n\nexport default CerebralApp({\n  state: {\n    color: \"green\",\n    center: [ 40, -81 ],\n    boundary: {\n      \"type\": \"FeatureCollection\",\n      \"features\": [\n        {\n          \"type\": \"Feature\",\n          \"properties\": {},\n          \"geometry\": {\n            \"type\": \"LineString\",\n            \"coordinates\": [\n              [\n                -87.5390625,\n                41.73852846935917\n              ],\n              [\n                -87.5390625,\n                38.65119833229951\n              ],\n              [\n                -88.0224609375,\n                38.272688535980976\n              ],\n              [\n                -88.154296875,\n                37.82280243352756\n              ],\n              [\n                -89.12109375,\n                37.3002752813443\n              ],\n              [\n                -87.099609375,\n                37.71859032558816\n              ],\n              [\n                -86.2646484375,\n                37.89219554724437\n              ],\n              [\n                -85.166015625,\n                38.95940879245423\n              ],\n              [\n                -84.638671875,\n                39.90973623453719\n              ],\n              [\n                -84.8583984375,\n                41.27780646738183\n              ],\n              [\n                -84.90234375,\n                41.86956082699455\n              ]\n            ]\n          }\n        },\n        {\n          \"type\": \"Feature\",\n          \"properties\": {},\n          \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n              [\n                [\n                  -86.6162109375,\n                  41.672911819602085\n                ],\n                [\n                  -88.24218749999999,\n                  41.77131167976407\n                ],\n                [\n                  -88.505859375,\n                  39.9434364619742\n                ],\n                [\n                  -87.5830078125,\n                  37.92686760148135\n                ],\n                [\n                  -84.814453125,\n                  37.26530995561875\n                ],\n                [\n                  -83.671875,\n                  39.26628442213066\n                ],\n                [\n                  -84.287109375,\n                  41.77131167976407\n                ],\n                [\n                  -86.6162109375,\n                  41.672911819602085\n                ]\n              ]\n            ]\n          }\n        }\n      ]\n    },\n  },\n  sequences: {\n    mapClicked: sequence('mapClicked', [\n      ({store,get}) => (get(state`color`) === 'red') ? store.set(state`color`, 'green') : store.set(state`color`, 'red'),\n    ]),\n    loadBoundary: sequence('loadBoundary', [\n      ({store}) => axios.get('https://api.growersync.trellisfw.io/bookmarks/fields/fields-index/Home/fields-index/Home128', { \n        headers: { Authorization: \"Bearer def\" },\n      }).then(resp => {\n        store.set(state`boundary`, resp.data.boundary.geojson);\n      })\n    ]),\n  },\n}, {\n  devtools: DevTools({\n    host: 'localhost:8001',\n    reconnect: true,\n  }),\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Container } from '@cerebral/react';\nimport CerebralApp from './cerebral-app';\n\n\nReactDOM.render(\n  <Container app={CerebralApp}>\n    <App />\n  </Container>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}